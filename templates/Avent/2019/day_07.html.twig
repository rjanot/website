{% extends 'Avent/day.html.twig' %}

{% set year = 2019 %}

{% block article_title "REX : Symfony 2 √† Symfony 4 et au del√† (Front-End)" %}

{% block article_content_md %}
REX : Symfony 2 √† Symfony 4 et au del√† (Front-End)
=================================

Il y'a quelques jours, sur la sc√®ne du SymfonyCon Amsterdam, Fabien Potencier (FabPot pour les intimes) a releas√© en live Symfony 5.

Notre projet principal √† Anaxago n'est pas encore migr√© dans cette version, mais si on regarde dans le r√©troviseur, il y a √† peine 18 mois, notre site √©tait encore en Symfony 2.8.

# Les enjeux d'une mont√©e de version ?
Quand on est d√©veloppeur, on a toujours envie de jouer avec les jouets les plus r√©cents,

Cependant dans la vie d'une startup il est parfois difficile de consacrer du temps pour ces t√¢ches techniques.

En ce qui concerne l'√©cosyst√®me de Symfony, les nouvelles fonctionnalit√©s apport√©es par les versions majeures transforment les mont√©es de versions en r√©els atouts pour une entreprise ax√©e sur le d√©veloppement et l'innovation.

Elles offrent √©galement aux d√©veloppeurs une meilleure exp√©rience de travail en leur permettant de travailler sur des outils r√©cents. Id√©al pour garder une certaine attractivit√© (on recrute au passage üòâ)

Reste que pour une petite √©quipe de d√©veloppeur, il n'est pas toujours ais√© de planifier ces mont√©es de version sans d√©laisser l'avanc√©e d'une roadmap produit.

Petits retours d'exp√©riences de la mont√©e de version avec Symfony 4, c√¥t√© front (pour les plus back d'entre vous, on se retrouve demain).

**TLDR**; Vous pouvez passer du temps √† planifier, √† pr√©voir, √† imaginer tout ce qui va casser, mais la v√©rit√© c'est que bien qu'une carte 21 en planning poker n'est pas suffisante, il faut monter les versions car ce que Symfony a √† nous offrir en vaut la peine, comme les nouveaux composants plus haut niveau (Workflow, Messenger,...).

# RIP Assetic

La mort d'Assetic dans la version 4 repr√©sente chez nous un immense chantier. En effet nous avons environ 200 fichiers twig faisant appel √† Assetic.

Il aura donc fallu repasser sur tous ces fichiers et migrer le code dans des javascripts g√©r√©s par WebpackEncore afin de garder les fonctionnalit√©s de minification, de caching, etc.

# Utilisation de node_modules

Dans notre architecture pr√©-SF4, les librairies JS sont diss√©min√©es un peu partout:
- Dans chacun des bundles
- Dans `/web`

Vu ces emplacements, les fichiers sont commit√©s dans le repo.

Si bien que Github consid√®re notre projet comme √©tant majoritairement javascript.

![projet javascript](https://lh5.googleusercontent.com/f-87EnHa0PHkl1csitMIx89La3CwvGa3g2_4hMDlKmahXK5KRvZNbXHJd906tcOSsMhyMZauxR90as4_iQ2Bdwh9h3w54uhIAEmvsFuI91uNfCVxAjl8kIgV1aMcdRVvkmpMug3g)

D√©sormais, les d√©pendances JS ont trouv√© leur place : `/node_modules` (oui, dit comme cela, ce nom semble mal trouv√©...).

Et le fait de regrouper les vendors dans un r√©pertoire non commit√© nous a permis de d√©couvrir que ...

##  ...les css des librairies vendors ont √©t√© directement modifi√©s dans les commits de notre repo !

Quand on d√©veloppe une plateforme qui est pass√©e par plusieurs √©quipes de d√©veloppement √† diff√©rent stade de son √©volution, on s'habitue vite (trop vite...) √† vivre avec du code ‚Äúlegacy‚Äù, vous savez ces fameux morceaux de codes qui fonctionnent sans que personne ne sache vraiment pourquoi.
On y trouve ainsi quelques cadavres de temps √† autres.
![Quelques cadavres dans le placard](https://media.giphy.com/media/eToYFbOtxtTUc/giphy.gif)

Ainsi nos pr√©c√©dents amis ont eu parfois des id√©es bien √©tranges comme de changer les CSS sources d'une librairie bien connue, puis d'enregistrer le tout dans un fichier resource d'un bundle maison.

Webpack nous permettant de g√©rer plus facilement nos d√©pendances, nous avons donc voulu supprimer ces fichiers sans nous douter une seconde du r√©sultat.

![omg](https://ljdchost.com/038/axrjEch.gif)

Nos yeux ont saign√©s apr√®s le premier refresh de notre page : aucune couleur ne correspondait √† notre charte graphique, les images charg√©es via des background-image n'√©taient plus les bonnes, etc...

Apr√®s r√©paration de nos r√©tines, il nous aura fallu quelques heures pour assainir les CSS et surcharger correctement les styles dont nous avions besoins.

## O√π est cette lib ?
Si nous avons bien appris une chose avec la disparition d'Assetic c'est que tous les mauvais choix faits, les mauvaises pratiques accumul√©es et raccourcis pris √† un instant T finissent toujours par nous rattraper.

√âvidemment ne pas [r√©inventer la roue](https://fr.wikipedia.org/wiki/R%C3%A9inventer_la_roue_carr%C3%A9e) est la base et le mot d'ordre des fain√©ants que nous sommes, mais quand certaines librairies utilis√©es ne sont plus maintenues et donc pas disponible via npm‚Ä¶ Comment vous dire...

![where is it?](https://lh6.googleusercontent.com/u9P9hwYm-fQuw0CH4gkpaf0vsOieuwviZ1TtFd8VsuUfDWuat-vBYd2dcQ_Ct4kf1jOXbw5x6eJjw9qUttNASXl7sE_ULwcd0aDT2g7_hxvgMkFcY5f9yYmobHrOHRrqGjODn7m2)

On a adopt√© un principe basique en se posant les questions suivantes :

-   Est-ce encore utile aujourd'hui ?
-   Existe-t-il un autre √©quivalent disponible sur npm ?
-   Peut on re-d√©velopper ais√©ment la fonctionnalit√© utilis√©e de la librairie ?

Heureusement le destin ne nous en voulait pas trop. Rare f√ªt les fois o√π nous sommes arriv√©s sur la derni√®re question.
Cela nous a aussi permis de voir √† quel point le code peut s'accumuler tr√©s vite dans un projet sans jamais √™tre utilis√©, d'o√π l'importance du code cleaning.

## Mais pourquoi rien ne fonctionne comme dans la documentation ?

Avec ce passage √† Webpack, nous en avons profit√© pour mettre √† jour certains packages tiers que nous utilisons sur la plateforme.

Parfois cette mise √† jour √©tait contrainte pour b√©n√©ficier du syst√®me import / export des modules Javascript.

Il existe ainsi le moment fatidique o√π on lance la commande yarn update et c'est ici que l'adage √™tre au mauvais endroit au mauvais moment prend du sens.

Apr√®s 5 lectures de la documentation et 2 heures pass√©es en peer programming pour r√©soudre un probl√®me d'initialisation d'une librairie (dont je ne divulguerai pas le nom), rien ne fonctionnait.

Apr√®s un bon caf√©, le temps est venu de supprimer compl√®tement le dossier node_module et de relancer la commande yarn update.

Cette fois nos esprits d√©sesp√©r√©s ont capt√©s une information capitale dans l'afflux de ligne de commande d√©filant sous nos yeux (yarn sait √™tre tr√®s bavard) : nous sommes en train d'installer une version RC. Un petit tour sur npmjs confirma que la version pouss√©e par l'√©diteur √©tait une RC.

Ne voulant pas trop servir de cobaye, nous pr√©cisions √† yarn que nous pr√©f√©rons une version stable: problem solved üëç


# yarn vs npm

Sans vouloir troller (ah bah si en fait, je vais troller), la communaut√© JS est un petit peu plus ‚Äúdispers√©e‚Äù que la communaut√© PHP.

Il a donc fallu choisir un gestionnaire de d√©pendance parmi les plus connus.

bower ? deprecated

Apr√®s Booba vs Kaaris, il va donc falloir arbitrer le match yarn vs npm. Sympa.

La grande force de yarn √† sa sortie √©tait de g√©rer le lock des d√©pendances, comme notre bon vieux composer.lock : depuis 2017, npm g√®re aussi ce lock. 1 partout, la balle au centre.

Un avantage de yarn √©tait la gestion du cache des paquets. Comme l'a soulev√© un de ses contributeurs: yarn a un CDN devant la registry npm, ce qui est cens√© acc√©l√©rer le t√©l√©chargement des packages.

<blockquote class="twitter-tweet">
    <p lang="en" dir="ltr">Just saw an article on <a href="https://twitter.com/RisingStack?ref_src=twsrc%5Etfw">@RisingStack</a> claiming ‚Äúit does not send package usage information to Facebook (yarn uses Facebook's npm registry mirror)‚Äù about <a href="https://twitter.com/yarnpkg?ref_src=twsrc%5Etfw">@yarnpkg</a>. This is not true. We use CloudFlare in front of npm both to speed up and to see overall usage.</p>
    &mdash; Burak Yigit Kaya (@madbyk) <a href="https://twitter.com/madbyk/status/988795518267678720?ref_src=twsrc%5Etfw">April 24, 2018</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Il y a fort √† parier (d√©sol√©, je parle pour les Parisiens) que votre voisin du Sentier a d√©j√† t√©l√©charg√© un m√™me package que vous et que celui ci se retrouve sur les serveurs parisiens de Cloudflare.

Qui plus est le cache de yarn en local est plus sympa que celui de npm. M√™me si je l'avoue, on ne va pas fouiner dedans tous les jours.

Notre choix : yarn

PS : bon, tout √ßa c'est pour avoir des arguments objectifs, mais c'est surtout parce que yarn est mis en avant dans la documentation Symfony üòÜ

# Changement de paradigme: tout est scop√© !

Autant certaines migrations peuvent se faire *facilement*. Par exemple entre Symfony 2.8 et 3.4, aucun changement fonctionnel majeur (c√¥t√© front tout du moins). Autant ici, c'est plus compliqu√©.

Pour qu'une page migre d'Assetic vers WebpackEncore, on utilise les librairies via Webpack. Bien. Mais du coup en migrant ces librairies, on perd la possibilit√© de faire simplement du JS dans le navigateur qui utiliserait les fonctions expos√©es par les librairies (au passage, merci pour autoprovideJQuery üòÜ )

Ainsi certaines librairies ont besoin de jQuery pour fonctionner mais impossible pour elle de le trouver tout seul.

Il faut donc comprendre au cas par cas comment injecter jQuery dans la librairie pour que tout fonctionne de nouveau.

L'autre aspect majeur √©tait notre d√©coupage fonctionnel de nos javascripts.
Avec Assetic tous les scripts n√©cessaires √©tait regroup√©s via la balise  ```{{ '{% javascripts ...' }}```

Le scope est ainsi global. Une fonction peut en appeler une autre situ√©e dans un autre fichier.

Avec WebpackEncore, ces javascripts deviennent cloisonn√©s.

Nous avons donc repens√© notre mani√®re de construire nos scripts et ainsi utiliser les fonctionnalit√©s d'import / export fournis par ES6.

# √âtat des lieux

La disparition d'Assetic est pour nous l'opportunit√© de nous aligner avec les bonnes pratiques actuelles.

Elle nous aura permis d'√©liminer un poids √©norme de dette technique.

Mais ce passage n'est pas gratuit, la t√¢che est immense et √† l'heure o√π nous √©crivons ces lignes, le travail n'est pas termin√©.

Heureusement la partie PHP est bien plus souple, rendez-vous demain üòÜ
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('build/avent/2019/07/nicolas-demay-stephane-diagne.jpg') }}" alt="Nicolas Demay & St√©phane Diagne"/>
{% endblock %}

{% block article_bio %}
    <h2><a href="{% block author_url 'https://www.welcometothejungle.com/fr/companies/anaxago/jobs' %}">{% block article_author 'Nicolas Demay & St√©phane Diagne' %}</a></h2>
    <p>
        D√©veloppeurs √† Anaxago
    </p>
{% endblock %}
